@implements IDisposable
@using MudBlazor
@inject NavigationManager NavigationManager

<MudNavMenu Color="Color.Inherit" Class="py-2">
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavLink Href="auth" Icon="@Icons.Material.Filled.Lock">Auth Required</MudNavLink>

    <AuthorizeView>
        <Authorized>
            <MudNavLink Href="NewPaint" Icon="@Icons.Material.Filled.Add">New Drawing</MudNavLink>
            <MudNavLink Href="Account/Manage" Icon="@Icons.Material.Filled.Person">@context.User.Identity?.Name</MudNavLink>
            <MudNavLink OnClick="Logout" Icon="@Icons.Material.Filled.ExitToApp">Logout</MudNavLink>
        </Authorized>
        <NotAuthorized>
            <MudNavLink Href="Account/Register" Icon="@Icons.Material.Filled.PersonAdd">Register</MudNavLink>
            <MudNavLink Href="Account/Login" Icon="@Icons.Material.Filled.Login">Login</MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
</MudNavMenu>

@code {
    private string? _currentUrl;
    private string? _returnUrl;

    protected string GetNewGuid() => Guid.NewGuid().ToString();

    protected override void OnInitialized()
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        _returnUrl = _currentUrl;
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        _returnUrl = _currentUrl;
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private void Handler()
    {
        var newGuid = GetNewGuid();
        NavigationManager.NavigateTo($"paint/{newGuid}", true);
    }
    
    private void Logout()
    {
        NavigationManager.NavigateTo($"Account/Logout?returnUrl={_returnUrl}", true);
    }
}